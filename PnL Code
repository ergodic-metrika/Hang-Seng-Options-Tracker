
# -*- coding: utf-8 -*-
"""
Created on Wed Dec 27 22:28:19 2023

@author: user
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats

# Load the Excel file
excel_file = pd.ExcelFile('D:\Derivatives Trading\Mini Hang Seng.xlsm')

# Get the sheet you want to read
sheet_name = 'For Python' # Replace with the name of the sheet you want to read
df = excel_file.parse(sheet_name)

# Output data information
print(df.head())

#******Plotting setup*****#
# Generate some data
Date = df["Date"]
Date
y1 =df["PnL Index"]
y1
y2 = df["Hang Seng"]
y2

# Get the maximum PnL value
max_pnl = df['PnL Index'].max()
max_pnl_date = df.loc[df['PnL Index']==max_pnl, 'Date'].values[0]

# Create the plot and set the first y-axis (left)
fig, ax1 = plt.subplots()
plt.xticks(rotation=90)
ax1.plot(Date, y1, 'b-')
ax1.scatter(max_pnl_date, max_pnl, color='red', marker='*')
ax1.set_xlabel('Date')
ax1.set_ylabel('PnL Index (Base = 100)', color='b')
ax1.tick_params('y', colors='b')

# Set the second y-axis (right)
ax2 = ax1.twinx()
ax2.plot(Date, y2, color='deepskyblue', marker=',')
ax2.set_ylabel('Hang Seng', color='deepskyblue')
ax2.tick_params('y', colors='deepskyblue')

# Add message box
msg = "Red * :PnL at Peak"
props = dict(boxstyle='round', facecolor='white', alpha=0.5)
ax1.text(0.05, 0.95, msg, transform=ax1.transAxes, fontsize=8,
        verticalalignment='top', bbox=props)

# Show the plot
plt.title('PnL vs Hang Seng')
plt.show()

#Pnl vs HK's Hang Seng VIX
HSI_VIX = df["HSI VIX"]
HSI_VIX 

# Create the plot and set the first y-axis (left)
fig, ax1 = plt.subplots()
plt.xticks(rotation=90)
ax1.plot(Date, y1, 'b-')
ax1.scatter(max_pnl_date, max_pnl, color='red', marker='*')
ax1.set_xlabel('Date')
ax1.set_ylabel('PnL Index (Base = 100)', color='b')
ax1.tick_params('y', colors='b')

# Set the second y-axis (right)
ax3 = ax1.twinx()
ax3.plot(Date, HSI_VIX , 'tan', marker='1', linestyle='-.')
ax3.set_ylabel('HSI VIX', color='tan')
ax3.tick_params('y', colors='tan')

# Add message box
msg = "Red * :PnL at Peak"
props = dict(boxstyle='round', facecolor='white', alpha=0.5)
ax1.text(0.05, 0.95, msg, transform=ax1.transAxes, fontsize=8,
        verticalalignment='top', bbox=props)


# Show the plot
plt.title('PnL vs HSI VIX')
plt.show()


##############################Performance####################
##########################################Performance###############################################
#Sharpe ratio
# Read in the portfolio returns data from a CSV file
R_first=df["PnL Index"].iloc[0,]
R_first
R_last = df["PnL Index"].iloc[-1]  #Always excel's actual row-2
R_last
portfolio_returns=(R_last-R_first)/R_first
portfolio_returns

daily_returns=df["Returns"]
daily_returns

# Max Drawdown Calculation for PnL Index
cumulative_returns = (1 + df["Returns"]).cumprod()
cumulative_max = cumulative_returns.cummax()
drawdown = (cumulative_returns / cumulative_max) - 1
max_drawdown = drawdown.min()

print("Max Drawdown:", max_drawdown)

# Calculate the excess returns and standard deviation
risk_free_rate = 0.04  # Hong Kong HIBOR
#Source: https://www.hsbc.com.hk/mortgages/tools/hibor-rate/
excess_returns = portfolio_returns - risk_free_rate
std_dev = np.std(daily_returns)
print("Standard Deviation of Daily Return:", std_dev)

# Calculate the Sharpe ratio
Sharpe_Ratio = excess_returns / std_dev
print("Sharpe Ratio:", Sharpe_Ratio)

# Convert 'Date' column to datetime if it is not already
df['Date'] = pd.to_datetime(df['Date'])

# Calculate the number of unique trading days
num_trading_days = df['Date'].nunique()
print("Number of Actual Trading Days:", num_trading_days)


#Annualized Sharpe ratio
risk_free_rate_daily = (1 + risk_free_rate) ** (1/250) - 1
risk_free_rate_daily 
average_daily_returns = daily_returns.sum() / num_trading_days
print("Average Daily Returns:", average_daily_returns)

excess_daily_return=average_daily_returns-risk_free_rate_daily 
excess_daily_return

Annualized_Sharpe_Ratio=excess_daily_return/std_dev*np.sqrt(250)
print("Annualized Sharpe Ratio:", Annualized_Sharpe_Ratio)

# Calculate the Profit Factor
positive_returns = daily_returns[daily_returns > 0].sum()
negative_returns = daily_returns[daily_returns < 0].sum()

# Avoid division by zero
if negative_returns != 0:
    profit_factor = abs(positive_returns / negative_returns)
else:
    profit_factor = float('inf')

print("Profit Factor:", profit_factor)


###############################Alpha##############
# Ensure the 'Date' column is in datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Sort the DataFrame based on the 'Date' column to ensure chronological order
df = df.sort_values('Date')

# Calculate daily returns of the Hang Seng index as percentage change from the previous row
df['HSI_daily_return'] = df['Hang Seng'].pct_change()

# Calculate the mean of the daily returns of HSI

mean_HSI_return = df['HSI_daily_return'][1:].mean()

print("Mean Daily Return of Hang Seng:", mean_HSI_return)

#Portfolio Alpha
# Compute the mean returns
# Calculate daily returns of the PnL as percentage change from the previous row
df['PnL_daily_return'] = df['PnL Index'].pct_change()

# Calculate the mean (average) of the daily returns

mean_PnL_return = df['PnL_daily_return'][1:].mean()

print("Mean Daily Return of PnL:", mean_PnL_return)


# Compute beta
covariance = df['PnL_daily_return'].cov(df['HSI_daily_return'])

print("Covariance between PnL and Hang Seng daily returns:", covariance)
variance = df['HSI_daily_return'].var()
variance
beta = covariance / variance
beta

# Compute alpha (assuming risk-free rate is 0)
alpha = (mean_PnL_return - (risk_free_rate_daily  +beta * mean_HSI_return))*np.sqrt(250)
# Print alpha
print("Alpha: ", alpha)
